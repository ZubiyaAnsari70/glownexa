import React, { useState, useEffect } from 'react';
import { Camera, User, Baby, Sun, X, Sparkles, Circle, Download, History } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { uploadToCloudinary } from './cloudinary';
import { saveSkinAnalysis } from './firestoreService';
import { auth } from './firebase';
import { onAuthStateChanged } from 'firebase/auth';

// The main component for the skin scan upload page.
const SkinScan = () => {
  const navigate = useNavigate();
  // State for form data
  const [age, setAge] = useState('');
  const [gender, setGender] = useState('');
  const [skinType, setSkinType] = useState('');
  // State for the uploaded file
  const [file, setFile] = useState(null);
  // State for the image preview URL
  const [preview, setPreview] = useState(null);
  // State for the message box
  const [message, setMessage] = useState({ text: '', type: '' });
  // Animation state
  const [isLoaded, setIsLoaded] = useState(false);
  // State for AI analysis result
  const [analysisResult, setAnalysisResult] = useState(null);
  // Loading state for analysis
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  // Current user state
  const [currentUser, setCurrentUser] = useState(null);
  // Cloudinary upload state
  const [uploadingToCloudinary, setUploadingToCloudinary] = useState(false);
  // Analysis ID for saving/updating
  const [currentAnalysisId, setCurrentAnalysisId] = useState(null);

  // Trigger animations on component mount
  useEffect(() => {
    setIsLoaded(true);
    
    // Listen for auth state changes
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user);
    });

    return () => unsubscribe();
  }, []);

  // Function to show a message and hide it after a few seconds
  const showMessage = (text, type) => {
    setMessage({ text, type });
    setTimeout(() => {
      setMessage({ text: '', type: '' });
    }, 3000); // Message disappears after 3 seconds
  };

  // Function to remove uploaded photo
  const removePhoto = () => {
    setFile(null);
    if (preview) {
      URL.revokeObjectURL(preview);
    }
    setPreview(null);
    showMessage('Photo removed successfully', 'success');
  };

  // Handles age input with validation
  const handleAgeChange = (e) => {
    const value = e.target.value;
    if (value === '' || (parseInt(value) >= 1 && parseInt(value) <= 120)) {
      setAge(value);
    } else if (parseInt(value) < 1) {
      showMessage('Age must be at least 1 year', 'error');
    }
  };

  // Handles file selection and sets the preview image.
  const handleFileChange = (event) => {
    const selectedFile = event.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
      // Create a URL for the image preview.
      setPreview(URL.createObjectURL(selectedFile));
      showMessage('Photo uploaded successfully!', 'success');
    }
  };

  // Helper to convert image file to base64
  const fileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new window.FileReader();
      reader.onload = () => resolve(reader.result.split(',')[1]);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  // Function to download analysis as PDF/text
  const downloadAnalysis = () => {
    if (!analysisResult) return;

    const analysisText = `
SKIN ANALYSIS REPORT
=====================

Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

USER DETAILS:
- Age: ${age} years
- Gender: ${gender}
- Skin Type: ${skinType}

AI ANALYSIS:
${analysisResult}

---
Generated by GlowNexa AI Skin Analysis
This analysis is for informational purposes only and should not replace professional medical consultation.
    `;

    const blob = new Blob([analysisText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `skin-analysis-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    showMessage('Analysis downloaded successfully!', 'success');
  };

  // Handles form submission and calls Gemini API
  const handleSubmit = async (event) => {
    event.preventDefault();

    if (parseInt(age) < 1) {
      showMessage('Age must be at least 1 year', 'error');
      return;
    }
    if (!file) {
      showMessage('Please upload a photo.', 'error');
      return;
    }
    if (!currentUser) {
      showMessage('Please log in to continue.', 'error');
      return;
    }

    setIsAnalyzing(true);
    setAnalysisResult(null);
    setCurrentAnalysisId(null);

    try {
      // Step 1: Upload image to Cloudinary
      showMessage('Uploading image to cloud storage...', 'success');
      setUploadingToCloudinary(true);
      
      const cloudinaryResult = await uploadToCloudinary(file);
      setUploadingToCloudinary(false);

      if (!cloudinaryResult.success) {
        throw new Error(`Image upload failed: ${cloudinaryResult.error}`);
      }

      showMessage('Image uploaded successfully! Analyzing with AI...', 'success');

      // Step 2: Convert image to base64 for Gemini API
      const imageBase64 = await fileToBase64(file);
      
      // Step 3: Call Gemini API for analysis
      const apiKey = process.env.REACT_APP_GEMINI_API_KEY;
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;

      // Prepare comprehensive prompt for Gemini
      const prompt = `As a dermatology AI assistant, please analyze this skin image for the following user:

User Details:
- Age: ${age} years
- Gender: ${gender}
- Skin Type: ${skinType}

Please provide a comprehensive analysis in the following format:

1. SKIN CONDITION ASSESSMENT:
   - Overall skin condition
   - Any visible concerns or abnormalities
   - Skin texture and appearance

2. POTENTIAL ISSUES IDENTIFIED:
   - List any potential skin problems visible
   - Severity level (mild/moderate/severe)
   - Areas of concern

3. RECOMMENDATIONS:
   - Skincare routine suggestions
   - Ingredients to look for
   - Ingredients to avoid

4. LIFESTYLE TIPS:
   - Diet recommendations
   - Sleep and stress management
   - Environmental factors to consider

5. WHEN TO CONSULT A DERMATOLOGIST:
   - Warning signs to watch for
   - Recommended follow-up timeline

Please provide practical, actionable advice while emphasizing that this analysis is for informational purposes only and should not replace professional medical consultation.`;

      // Prepare request body with correct format for Gemini 1.5
      const body = {
        contents: [{
          parts: [
            { text: prompt },
            { 
              inline_data: { 
                mime_type: file.type, 
                data: imageBase64 
              } 
            }
          ]
        }],
        generationConfig: {
          temperature: 0.4,
          topK: 32,
          topP: 1,
          maxOutputTokens: 4096,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('API Error:', errorData);
        throw new Error(`API request failed: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      console.log('API Response:', data);
      
      const resultText = data?.candidates?.[0]?.content?.parts?.[0]?.text || 'No analysis could be generated. Please try again with a clearer image.';

      setAnalysisResult(resultText);
      showMessage('AI analysis complete! Saving to your profile...', 'success');

      // Step 4: Save analysis data to Firestore
      const analysisData = {
        age: parseInt(age),
        gender: gender,
        skinType: skinType,
        originalFileName: file.name,
        cloudinaryUrl: cloudinaryResult.url,
        cloudinaryPublicId: cloudinaryResult.public_id,
        prompt: prompt,
        aiResponse: resultText
      };

      const saveResult = await saveSkinAnalysis(currentUser.uid, analysisData);
      
      if (saveResult.success) {
        setCurrentAnalysisId(saveResult.analysisId);
        showMessage('Analysis saved successfully to your profile!', 'success');
      } else {
        console.error('Failed to save analysis:', saveResult.error);
        showMessage('Analysis complete, but failed to save to profile.', 'error');
      }

    } catch (error) {
      console.error('Analysis error:', error);
      setAnalysisResult(null);
      showMessage(`Failed to analyze: ${error.message}. Please try again.`, 'error');
    } finally {
      setIsAnalyzing(false);
      setUploadingToCloudinary(false);
    }
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Enhanced Animated Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900">
        {/* Gradient Overlay */}
        <div className="absolute inset-0 bg-gradient-to-br from-blue-600/30 via-purple-600/40 to-pink-600/30"></div>
        
        {/* Animated Floating Objects */}
        <div className="absolute inset-0">
          {/* Large floating circles */}
          <div className="absolute top-10 left-10 w-32 h-32 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-xl animate-float"></div>
          <div className="absolute top-32 right-20 w-24 h-24 bg-gradient-to-r from-pink-400/20 to-red-400/20 rounded-full blur-lg animate-float-reverse"></div>
          <div className="absolute bottom-20 left-32 w-40 h-40 bg-gradient-to-r from-purple-400/15 to-blue-400/15 rounded-full blur-2xl animate-float-slow"></div>
          <div className="absolute bottom-32 right-10 w-28 h-28 bg-gradient-to-r from-indigo-400/20 to-pink-400/20 rounded-full blur-xl animate-float"></div>
          
          {/* Medium floating objects */}
          <div className="absolute top-1/4 left-1/3 w-16 h-16 bg-gradient-to-r from-cyan-400/25 to-blue-400/25 rounded-full blur-md animate-pulse-slow"></div>
          <div className="absolute top-3/4 right-1/3 w-20 h-20 bg-gradient-to-r from-purple-400/20 to-pink-400/20 rounded-full blur-lg animate-bounce-slow"></div>
          
          {/* Small sparkle effects */}
          <Sparkles className="absolute top-16 right-1/4 h-6 w-6 text-white/30 animate-pulse" />
          <Sparkles className="absolute bottom-1/4 left-1/4 h-4 w-4 text-blue-300/40 animate-pulse animation-delay-1000" />
          <Sparkles className="absolute top-1/2 right-16 h-5 w-5 text-purple-300/50 animate-pulse animation-delay-2000" />
          
          {/* Geometric shapes */}
          <div className="absolute top-1/3 right-1/2 w-12 h-12 border border-white/10 rotate-45 animate-spin-slow"></div>
          <Circle className="absolute bottom-1/3 left-1/2 h-8 w-8 text-white/20 animate-pulse animation-delay-1500" />
        </div>
        
        {/* Moving gradient waves */}
        <div className="absolute inset-0">
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent transform -skew-y-12 animate-wave"></div>
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-blue-400/10 to-transparent transform -skew-y-6 animate-wave-reverse animation-delay-3000"></div>
        </div>
      </div>

      {/* Main Content */}
      <div className={`relative z-10 min-h-screen p-4 font-sans antialiased flex items-center justify-center transition-all duration-1000 ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
        <div className="w-full max-w-3xl p-10 bg-white/10 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 space-y-8 transform hover:scale-[1.01] transition-all duration-300">
          {/* Header Section */}
          <div className={`text-center space-y-3 transition-all duration-700 delay-200 ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-white to-blue-200 bg-clip-text text-transparent">
              Upload Your Skin Scan
            </h1>
            <p className="text-blue-100 text-lg">
              Get AI-powered skin analysis with personalized recommendations
            </p>
          </div>

          <div className="space-y-8">
            {/* User Details Section */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {/* Age Input */}
              <div className={`space-y-3 transition-all duration-700 delay-300 ${isLoaded ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-4'}`}>
                <label htmlFor="age" className="flex items-center text-white font-semibold text-sm uppercase tracking-wide">
                  <Baby className="h-5 w-5 mr-2 text-blue-300" /> Age
                </label>
                <input
                  type="number"
                  id="age"
                  value={age}
                  onChange={handleAgeChange}
                  placeholder="e.g., 30"
                  min="1"
                  max="120"
                  className="w-full px-5 py-4 border-2 border-white/20 rounded-2xl focus:outline-none focus:ring-3 focus:ring-blue-400/50 focus:border-blue-300 transition-all duration-300 bg-white/10 backdrop-blur-sm hover:bg-white/15 hover:shadow-lg text-white placeholder-white/60"
                  required
                />
              </div>

              {/* Gender Select */}
              <div className={`space-y-3 transition-all duration-700 delay-400 ${isLoaded ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-4'}`}>
                <label htmlFor="gender" className="flex items-center text-white font-semibold text-sm uppercase tracking-wide">
                  <User className="h-5 w-5 mr-2 text-blue-300" /> Gender
                </label>
                <select
                  id="gender"
                  value={gender}
                  onChange={(e) => setGender(e.target.value)}
                  className="w-full px-5 py-4 border-2 border-white/20 rounded-2xl focus:outline-none focus:ring-3 focus:ring-blue-400/50 focus:border-blue-300 transition-all duration-300 bg-white/10 backdrop-blur-sm hover:bg-white/15 hover:shadow-lg text-white"
                  required
                >
                  <option value="" disabled className="text-gray-800">Select gender</option>
                  <option value="male" className="text-gray-800">Male</option>
                  <option value="female" className="text-gray-800">Female</option>
                  <option value="other" className="text-gray-800">Other</option>
                  <option value="prefer-not-to-say" className="text-gray-800">Prefer not to say</option>
                </select>
              </div>

              {/* Skin Type Select */}
              <div className={`space-y-3 transition-all duration-700 delay-500 ${isLoaded ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-4'}`}>
                <label htmlFor="skinType" className="flex items-center text-white font-semibold text-sm uppercase tracking-wide">
                  <Sun className="h-5 w-5 mr-2 text-blue-300" /> Skin Type
                </label>
                <select
                  id="skinType"
                  value={skinType}
                  onChange={(e) => setSkinType(e.target.value)}
                  className="w-full px-5 py-4 border-2 border-white/20 rounded-2xl focus:outline-none focus:ring-3 focus:ring-blue-400/50 focus:border-blue-300 transition-all duration-300 bg-white/10 backdrop-blur-sm hover:bg-white/15 hover:shadow-lg text-white"
                  required
                >
                  <option value="" disabled className="text-gray-800">Select skin type</option>
                  <option value="normal" className="text-gray-800">Normal</option>
                  <option value="oily" className="text-gray-800">Oily</option>
                  <option value="dry" className="text-gray-800">Dry</option>
                  <option value="combination" className="text-gray-800">Combination</option>
                  <option value="sensitive" className="text-gray-800">Sensitive</option>
                </select>
              </div>
            </div>

            {/* Photo Upload Section */}
            <div className={`space-y-6 pt-6 transition-all duration-700 delay-600 ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>
              <div className="text-center">
                <label className="flex items-center justify-center text-xl font-semibold text-white mb-2">
                  <Camera className="h-6 w-6 mr-3 text-blue-300" /> Upload a Photo of Your Skin
                </label>
                <p className="text-blue-100 text-sm">
                  For best results, ensure good lighting and clear image quality
                </p>
              </div>
              
              <div className="relative w-full h-80 border-3 border-dashed border-white/30 rounded-3xl flex items-center justify-center cursor-pointer transition-all duration-300 hover:border-blue-300 hover:bg-white/10 group backdrop-blur-sm">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleFileChange}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  required
                />
                {preview ? (
                  <div className="relative w-full h-full rounded-3xl overflow-hidden">
                    <img 
                      src={preview} 
                      alt="Skin scan preview" 
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105" 
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    
                    {/* Remove Photo Button */}
                    <button
                      type="button"
                      onClick={removePhoto}
                      className="absolute top-4 right-4 bg-red-500/80 hover:bg-red-500 text-white rounded-full p-2 shadow-lg transition-all duration-200 hover:scale-110 z-10 backdrop-blur-sm"
                      title="Remove photo"
                    >
                      <X className="h-4 w-4" />
                    </button>
                  </div>
                ) : (
                  <div className="text-center text-white/70 p-8 group-hover:text-white transition-colors duration-300">
                    <Camera className="h-16 w-16 mx-auto text-white/50 group-hover:text-blue-300 group-hover:scale-110 transition-all duration-300 mb-4" />
                    <p className="text-xl font-medium mb-2">Click or drag a file to upload</p>
                    <p className="text-sm opacity-70">PNG, JPG, up to 10MB</p>
                  </div>
                )}
              </div>
            </div>

            {/* Submit Button */}
            <div className={`pt-6 transition-all duration-700 delay-700 ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>
              <button
                type="submit"
                onClick={handleSubmit}
                disabled={isAnalyzing}
                className={`w-full bg-gradient-to-r from-blue-500/80 to-purple-500/80 backdrop-blur-sm text-white font-bold py-4 px-8 rounded-2xl shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-blue-400/50 transform border border-white/20 ${
                  isAnalyzing 
                    ? 'opacity-70 cursor-not-allowed' 
                    : 'hover:from-blue-600/90 hover:to-purple-600/90 hover:shadow-2xl hover:-translate-y-1'
                }`}
              >
                <div className="flex items-center justify-center">
                  {isAnalyzing ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent mr-2"></div>
                      {uploadingToCloudinary ? 'Uploading image...' : 'Analyzing with AI...'}
                    </>
                  ) : (
                    <>
                      <Camera className="h-5 w-5 mr-2" />
                      Analyze My Skin
                    </>
                  )}
                </div>
              </button>
            </div>
          </div>

          {/* Message Box */}
          {message.text && (
            <div
              className={`p-5 rounded-2xl font-medium border-l-4 transition-all duration-300 backdrop-blur-sm animate-slideUp ${
                message.type === 'success' 
                  ? 'bg-green-500/20 text-green-200 border-green-400' 
                  : 'bg-red-500/20 text-red-200 border-red-400'
              }`}
            >
              <div className="flex items-center">
                <div className={`w-2 h-2 rounded-full mr-3 ${
                  message.type === 'success' ? 'bg-green-400' : 'bg-red-400'
                }`}></div>
                {message.text}
              </div>
            </div>
          )}

          {/* AI Remedy/Analysis Section */}
          {analysisResult && (
            <div className="mt-8 p-8 rounded-3xl bg-gradient-to-br from-white/25 to-white/10 backdrop-blur-xl text-white border border-blue-400/50 shadow-2xl animate-slideUp">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center">
                  <div className="bg-gradient-to-r from-blue-500 to-purple-500 p-3 rounded-full mr-4">
                    <Sparkles className="h-6 w-6 text-white" />
                  </div>
                  <h2 className="text-3xl font-bold text-transparent bg-gradient-to-r from-blue-300 to-purple-300 bg-clip-text">
                    AI Skin Analysis & Recommendations
                  </h2>
                </div>
                
                {/* Action Buttons */}
                <div className="flex space-x-3">
                  <button
                    onClick={downloadAnalysis}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white px-4 py-2 rounded-xl flex items-center space-x-2 transition-all duration-300 hover:scale-105 shadow-lg"
                    title="Download Analysis Report"
                  >
                    <Download className="h-4 w-4" />
                    <span className="hidden sm:inline">Download</span>
                  </button>
                  
                  <button
                    onClick={() => navigate('/history')}
                    className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-4 py-2 rounded-xl flex items-center space-x-2 transition-all duration-300 hover:scale-105 shadow-lg"
                    title="View Analysis History"
                  >
                    <History className="h-4 w-4" />
                    <span className="hidden sm:inline">History</span>
                  </button>
                </div>
              </div>
              
              <div className="bg-white/10 rounded-2xl p-6 border border-white/20">
                <div className="prose prose-invert max-w-none">
                  <div 
                    className="whitespace-pre-line text-lg leading-relaxed"
                    style={{
                      fontFamily: 'system-ui, -apple-system, sans-serif',
                      lineHeight: '1.8'
                    }}
                  >
                    {analysisResult}
                  </div>
                </div>
              </div>
              
              {/* Analysis Metadata */}
              {currentAnalysisId && (
                <div className="mt-4 p-3 bg-blue-500/20 border border-blue-400/30 rounded-xl">
                  <div className="flex items-center text-sm text-blue-200">
                    <div className="bg-blue-500 p-1 rounded-full mr-2">
                      <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <span>Analysis saved to your profile • Analysis ID: {currentAnalysisId.slice(-8)}</span>
                  </div>
                </div>
              )}
              
              <div className="mt-6 p-4 bg-yellow-500/20 border border-yellow-400/50 rounded-xl">
                <div className="flex items-start">
                  <div className="bg-yellow-500 p-2 rounded-full mr-3 mt-1">
                    <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-semibold text-yellow-200 mb-2">Important Disclaimer</p>
                    <p className="text-yellow-100 text-sm">
                      This AI analysis is for informational purposes only and should not replace professional medical advice. 
                      Please consult a qualified dermatologist for proper diagnosis and treatment.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Custom CSS Animations */}
      <style jsx>{`
        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @keyframes float-reverse {
          0%, 100% { transform: translateY(0px) rotate(0deg); }
          50% { transform: translateY(20px) rotate(-180deg); }
        }
        
        @keyframes float-slow {
          0%, 100% { transform: translateY(0px) scale(1); }
          50% { transform: translateY(-30px) scale(1.1); }
        }
        
        @keyframes bounce-slow {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-15px); }
        }
        
        @keyframes pulse-slow {
          0%, 100% { opacity: 0.3; transform: scale(1); }
          50% { opacity: 0.8; transform: scale(1.05); }
        }
        
        @keyframes spin-slow {
          from { transform: rotate(45deg); }
          to { transform: rotate(405deg); }
        }
        
        @keyframes wave {
          0% { transform: translateX(-100%) skewY(-12deg); }
          100% { transform: translateX(100%) skewY(-12deg); }
        }
        
        @keyframes wave-reverse {
          0% { transform: translateX(100%) skewY(-6deg); }
          100% { transform: translateX(-100%) skewY(-6deg); }
        }
        
        @keyframes slideUp {
          from { transform: translateY(20px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
        
        .animate-float { animation: float 6s ease-in-out infinite; }
        .animate-float-reverse { animation: float-reverse 8s ease-in-out infinite; }
        .animate-float-slow { animation: float-slow 10s ease-in-out infinite; }
        .animate-bounce-slow { animation: bounce-slow 4s ease-in-out infinite; }
        .animate-pulse-slow { animation: pulse-slow 3s ease-in-out infinite; }
        .animate-spin-slow { animation: spin-slow 20s linear infinite; }
        .animate-wave { animation: wave 15s linear infinite; }
        .animate-wave-reverse { animation: wave-reverse 20s linear infinite; }
        .animate-slideUp { animation: slideUp 0.3s ease-out; }
        
        .animation-delay-1000 { animation-delay: 1s; }
        .animation-delay-1500 { animation-delay: 1.5s; }
        .animation-delay-2000 { animation-delay: 2s; }
        .animation-delay-3000 { animation-delay: 3s; }
      `}</style>
    </div>
  );
};

export default SkinScan;