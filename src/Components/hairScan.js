import React, { useState, useEffect } from 'react';
import { Camera, User, Baby, Sun, X, Sparkles, Circle, Download, History } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { uploadToCloudinary } from './cloudinary';
import { saveHairAnalysis } from './firestoreService';
import { auth } from './firebase';
import { onAuthStateChanged } from 'firebase/auth';

// The main component for the hair scan upload page.
const HairScan = () => {
  const navigate = useNavigate();
  // State for form data
  const [age, setAge] = useState('');
  const [gender, setGender] = useState('');
  const [hairType, setHairType] = useState('');
  // State for the uploaded file
  const [file, setFile] = useState(null);
  // State for the image preview URL
  const [preview, setPreview] = useState(null);
  // State for the message box
  const [message, setMessage] = useState({ text: '', type: '' });
  // Animation state
  const [isLoaded, setIsLoaded] = useState(false);
  // State for AI analysis result
  const [analysisResult, setAnalysisResult] = useState(null);
  // Loading state for analysis
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  // Current user state
  const [currentUser, setCurrentUser] = useState(null);
  // Cloudinary upload state
  const [uploadingToCloudinary, setUploadingToCloudinary] = useState(false);

  // Trigger animations on component mount
  useEffect(() => {
    setIsLoaded(true);
    
    // Listen for auth state changes
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user);
    });

    return () => unsubscribe();
  }, []);

  // Function to show a message and hide it after a few seconds
  const showMessage = (text, type) => {
    setMessage({ text, type });
    setTimeout(() => {
      setMessage({ text: '', type: '' });
    }, 3000); // Message disappears after 3 seconds
  };

  // Function to remove uploaded photo
  const removePhoto = () => {
    setFile(null);
    if (preview) {
      URL.revokeObjectURL(preview);
    }
    setPreview(null);
    showMessage('Photo removed successfully', 'success');
  };

  // Handles age input with validation
  const handleAgeChange = (e) => {
    const value = e.target.value;
    if (value === '' || (parseInt(value) >= 1 && parseInt(value) <= 120)) {
      setAge(value);
    } else if (parseInt(value) < 1) {
      showMessage('Age must be at least 1 year', 'error');
    }
  };

  // Handles file selection and sets the preview image.
  const handleFileChange = (event) => {
    const selectedFile = event.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
      // Create a URL for the image preview.
      setPreview(URL.createObjectURL(selectedFile));
      showMessage('Photo uploaded successfully!', 'success');
    }
  };

  // Helper to convert image file to base64
  const fileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new window.FileReader();
      reader.onload = () => resolve(reader.result.split(',')[1]);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  // Function to download analysis as PDF/text
  const downloadAnalysis = () => {
    if (!analysisResult) return;

    const analysisText = `
HAIR ANALYSIS REPORT
=====================

User Information:
- Age: ${age}
- Gender: ${gender}
- Hair Type: ${hairType}
- Analysis Date: ${new Date().toLocaleDateString()}

AI Analysis Results:
${analysisResult}

Generated by Glownexa Hair Analysis AI
    `;

    const blob = new Blob([analysisText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `hair-analysis-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    showMessage('Analysis downloaded successfully!', 'success');
  };

  // Function to reset form
  const resetForm = () => {
    setAge('');
    setGender('');
    setHairType('');
    setFile(null);
    if (preview) {
      URL.revokeObjectURL(preview);
    }
    setPreview(null);
    setAnalysisResult(null);
    showMessage('Form reset successfully', 'success');
  };

  // Enhanced AI analysis function for hair
  const analyzeWithAI = async (imageBase64) => {
    try {
      setIsAnalyzing(true);
      
      const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;
      
      const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-pro-vision:generateContent?key=${API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [
              {
                text: `As a professional trichologist and hair analysis AI assistant, please analyze this hair image for a ${age}-year-old ${gender} with ${hairType} hair type. Provide a comprehensive analysis including:

HAIR CONDITION ASSESSMENT:
- Overall hair health and condition
- Hair texture and thickness
- Scalp condition visibility
- Hair density and coverage

POTENTIAL ISSUES IDENTIFIED:
- Hair loss or thinning patterns
- Scalp conditions (dryness, oiliness, dandruff)
- Hair damage (breakage, split ends, dryness)
- Any signs of hair disorders

HAIR CARE RECOMMENDATIONS:
- Suitable shampoo and conditioner types
- Hair treatments and masks
- Styling recommendations
- Products to avoid

LIFESTYLE AND NUTRITION TIPS:
- Dietary recommendations for hair health
- Vitamins and supplements if needed
- Hair care routine suggestions
- Environmental protection tips

WHEN TO CONSULT A SPECIALIST:
- Signs that require professional help
- Dermatologist or trichologist consultation

Please provide practical, actionable advice. Be thorough but easy to understand. Focus on the specific hair type: ${hairType}.`
              },
              {
                inline_data: {
                  mime_type: "image/jpeg",
                  data: imageBase64
                }
              }
            ]
          }]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error response:', errorText);
        
        if (response.status === 429) {
          throw new Error('API quota exceeded. Please try again later.');
        } else if (response.status === 403) {
          throw new Error('API access denied. Please check your API key.');
        } else {
          throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }
      }

      const data = await response.json();
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        const resultText = data.candidates[0].content.parts[0].text;
        setAnalysisResult(resultText);
        return resultText;
      } else {
        console.error('Invalid API response format:', data);
        throw new Error('Invalid response format from AI service');
      }
    } catch (error) {
      console.error('Error analyzing with AI:', error);
      setAnalysisResult(null);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Function to handle form submission
  const handleSubmit = async (event) => {
    event.preventDefault();

    // Validation
    if (!file) {
      showMessage('Please upload a hair photo', 'error');
      return;
    }
    if (!age || !gender || !hairType) {
      showMessage('Please fill in all details', 'error');
      return;
    }
    if (!currentUser) {
      showMessage('Please log in to continue', 'error');
      return;
    }

    try {
      // Step 1: Upload to Cloudinary
      setUploadingToCloudinary(true);
      showMessage('Uploading image...', 'info');
      
      const cloudinaryResult = await uploadToCloudinary(file);
      
      if (!cloudinaryResult.success) {
        throw new Error(`Cloudinary upload failed: ${cloudinaryResult.error}`);
      }
      
      setUploadingToCloudinary(false);
      showMessage('Image uploaded successfully!', 'success');

      // Step 2: Analyze with AI
      showMessage('Analyzing hair with AI...', 'info');
      const base64Image = await fileToBase64(file);
      const aiAnalysis = await analyzeWithAI(base64Image);
      console.log('AI analysis completed:', aiAnalysis ? 'Success' : 'Failed');

      if (!aiAnalysis) {
        throw new Error('AI analysis failed to return results');
      }

      // Step 3: Save to Firestore
      showMessage('Saving analysis...', 'info');
      const analysisData = {
        age: parseInt(age),
        gender: gender,
        hairType: hairType,
        originalFileName: file.name,
        cloudinaryUrl: cloudinaryResult.url, // Use .url not .secure_url
        cloudinaryPublicId: cloudinaryResult.public_id,
        aiAnalysis: aiAnalysis // This should match what saveHairAnalysis expects
      };

      const saveResult = await saveHairAnalysis(currentUser.uid, analysisData);
      
      if (saveResult.success) {
        showMessage('Hair analysis completed successfully!', 'success');
      } else {
        console.error('Failed to save analysis:', saveResult.error);
        showMessage('Analysis completed but failed to save. Please try again.', 'warning');
      }

    } catch (error) {
      console.error('Error during hair analysis:', error);
      setAnalysisResult(null);
      setUploadingToCloudinary(false);
      
      // More specific error messages
      if (error.message.includes('quota') || error.message.includes('limit')) {
        showMessage('API quota exceeded. Please try again later.', 'error');
      } else if (error.message.includes('Cloudinary')) {
        showMessage('Image upload failed. Please try again.', 'error');
      } else {
        showMessage(`Failed to analyze hair: ${error.message}`, 'error');
      }
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-red-100 flex items-center justify-center p-4">
      <div className={`w-full max-w-4xl transform transition-all duration-1000 ${isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
        
        {/* Message Box */}
        {message.text && (
          <div className={`mb-6 p-4 rounded-xl shadow-lg text-center font-medium transform transition-all duration-500 ${
            message.type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
            message.type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
            message.type === 'info' ? 'bg-blue-100 text-blue-800 border border-blue-200' :
            'bg-yellow-100 text-yellow-800 border border-yellow-200'
          }`}>
            {message.text}
          </div>
        )}

        <div className="bg-white/95 backdrop-blur-lg rounded-3xl shadow-2xl overflow-hidden border border-white/20">
          {/* Header */}
          <div className="bg-gradient-to-r from-amber-600 via-orange-600 to-red-600 p-8 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-amber-600/20 via-orange-600/20 to-red-600/20"></div>
            <div className="relative z-10">
              <div className="flex items-center space-x-4 mb-4">
                <div className="p-3 bg-white/20 rounded-2xl backdrop-blur-sm">
                  <Camera className="h-8 w-8 text-white" />
                </div>
                <div>
                  <h1 className="text-4xl font-bold">Hair Analysis</h1>
                  <p className="text-orange-100 text-lg">AI-powered hair health assessment</p>
                </div>
              </div>
              <div className="bg-white/10 rounded-xl p-4 backdrop-blur-sm">
                <p className="text-sm leading-relaxed">
                  Upload a clear photo of your hair and scalp for comprehensive analysis. Our AI will assess hair health, identify potential issues, and provide personalized care recommendations.
                </p>
              </div>
            </div>
          </div>

          <div className="p-8">
            <form onSubmit={handleSubmit} className="space-y-8">
              {/* User Details Section */}
              <div className="space-y-6">
                <h2 className="text-2xl font-bold text-gray-800 flex items-center space-x-2">
                  <User className="h-6 w-6 text-orange-600" />
                  <span>Personal Information</span>
                </h2>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Age Input */}
                  <div className="space-y-2">
                    <label className="flex items-center space-x-2 text-sm font-semibold text-gray-700">
                      <Baby className="h-4 w-4 text-orange-600" />
                      <span>Age</span>
                    </label>
                    <input
                      type="number"
                      placeholder="Enter your age"
                      value={age}
                      onChange={handleAgeChange}
                      min="1"
                      max="120"
                      className="w-full px-4 py-3 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-2 focus:ring-orange-200 transition-all duration-300 placeholder-gray-400"
                      required
                    />
                  </div>

                  {/* Gender Selection */}
                  <div className="space-y-2">
                    <label className="flex items-center space-x-2 text-sm font-semibold text-gray-700">
                      <User className="h-4 w-4 text-orange-600" />
                      <span>Gender</span>
                    </label>
                    <select
                      value={gender}
                      onChange={(e) => setGender(e.target.value)}
                      className="w-full px-4 py-3 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-2 focus:ring-orange-200 transition-all duration-300"
                      required
                    >
                      <option value="">Select gender</option>
                      <option value="male">Male</option>
                      <option value="female">Female</option>
                      <option value="other">Other</option>
                    </select>
                  </div>

                  {/* Hair Type Selection */}
                  <div className="space-y-2">
                    <label className="flex items-center space-x-2 text-sm font-semibold text-gray-700">
                      <Sun className="h-4 w-4 text-orange-600" />
                      <span>Hair Type</span>
                    </label>
                    <select
                      value={hairType}
                      onChange={(e) => setHairType(e.target.value)}
                      className="w-full px-4 py-3 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-2 focus:ring-orange-200 transition-all duration-300"
                      required
                    >
                      <option value="">Select hair type</option>
                      <option value="straight">Straight</option>
                      <option value="wavy">Wavy</option>
                      <option value="curly">Curly</option>
                      <option value="coily">Coily</option>
                      <option value="fine">Fine</option>
                      <option value="thick">Thick</option>
                      <option value="damaged">Damaged</option>
                      <option value="color-treated">Color-treated</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Photo Upload Section */}
              <div className="space-y-6">
                <h2 className="text-2xl font-bold text-gray-800 flex items-center space-x-2">
                  <Camera className="h-6 w-6 text-orange-600" />
                  <span>Hair Photo</span>
                </h2>

                {!preview ? (
                  <div className="border-2 border-dashed border-orange-300 rounded-2xl p-12 text-center bg-gradient-to-br from-orange-50 to-amber-50 hover:from-orange-100 hover:to-amber-100 transition-all duration-300 cursor-pointer group">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleFileChange}
                      className="hidden"
                      id="hair-upload"
                    />
                    <label htmlFor="hair-upload" className="cursor-pointer">
                      <div className="space-y-4">
                        <div className="mx-auto w-20 h-20 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <Camera className="h-10 w-10 text-white" />
                        </div>
                        <div>
                          <p className="text-xl font-semibold text-gray-800 mb-2">Upload Hair Photo</p>
                          <p className="text-gray-600">
                            Click to browse or drag and drop your hair image here
                          </p>
                          <p className="text-sm text-gray-500 mt-2">
                            For best results, ensure good lighting and clear image quality
                          </p>
                        </div>
                      </div>
                    </label>
                  </div>
                ) : (
                  <div className="relative group">
                    <img
                      src={preview}
                      alt="Hair preview"
                      className="w-full h-64 object-cover rounded-2xl shadow-lg"
                    />
                    <button
                      type="button"
                      onClick={removePhoto}
                      className="absolute top-4 right-4 bg-red-500 hover:bg-red-600 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300 hover:scale-110"
                    >
                      <X className="h-4 w-4" />
                    </button>
                    <div className="absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl flex items-center justify-center">
                      <p className="text-white font-medium">Click X to remove</p>
                    </div>
                  </div>
                )}
              </div>

              {/* Submit Button */}
              <div className="flex flex-col sm:flex-row gap-4">
                <button
                  type="submit"
                  disabled={isAnalyzing || uploadingToCloudinary}
                  className="flex-1 bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 disabled:from-gray-400 disabled:to-gray-500 text-white font-bold py-4 px-8 rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-xl disabled:hover:scale-100 disabled:hover:shadow-none flex items-center justify-center space-x-2"
                >
                  {isAnalyzing || uploadingToCloudinary ? (
                    <>
                      <Circle className="h-5 w-5 animate-spin" />
                      <span>
                        {uploadingToCloudinary ? 'Uploading...' : 'Analyzing...'}
                      </span>
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-5 w-5" />
                      <span>Analyze Hair</span>
                    </>
                  )}
                </button>

                <button
                  type="button"
                  onClick={resetForm}
                  className="px-8 py-4 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium rounded-xl transition-all duration-300 hover:scale-105"
                >
                  Reset Form
                </button>
              </div>
            </form>
          </div>
        </div>

        {/* Analysis Results */}
        {analysisResult && (
          <div className="mt-8 bg-gradient-to-br from-orange-900 via-red-900 to-amber-900 rounded-3xl shadow-2xl overflow-hidden text-white">
            <div className="p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-3xl font-bold flex items-center space-x-3">
                  <Sparkles className="h-8 w-8 text-orange-300" />
                  <span>Hair Analysis Results</span>
                </h2>
                
                <div className="flex space-x-3">
                  <button
                    onClick={downloadAnalysis}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white px-4 py-2 rounded-xl flex items-center space-x-2 transition-all duration-300 hover:scale-105 shadow-lg"
                    title="Download Analysis Report"
                  >
                    <Download className="h-4 w-4" />
                    <span className="hidden sm:inline">Download</span>
                  </button>
                  
                  <button
                    onClick={() => navigate('/history')}
                    className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-4 py-2 rounded-xl flex items-center space-x-2 transition-all duration-300 hover:scale-105 shadow-lg"
                    title="View Analysis History"
                  >
                    <History className="h-4 w-4" />
                    <span className="hidden sm:inline">History</span>
                  </button>
                </div>
              </div>
              
              <div className="bg-white/10 rounded-2xl p-6 border border-white/20">
                <div className="prose prose-invert max-w-none">
                  <div className="whitespace-pre-wrap text-sm leading-relaxed">
                    {analysisResult}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default HairScan;

